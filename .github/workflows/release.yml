name: Release
run-name: 'Release ${{ inputs.version }} on ${{ inputs.target_branch }}'

on:
  workflow_call:
    inputs:
      version:
        description: 'The version string'
        required: true
        type: string
      target_branch:
        description: 'The branch where the changelog will be updated and the version bumped'
        required: true
        type: string
      promote_artifacts:
        description: 'Promote Nexus3 artifacts'
        default: true
        type: boolean
      create_tag:
        description: 'Create the git tag'
        default: true
        type: boolean
      update_changelog:
        description: 'Update the changelog'
        default: true
        type: boolean
      create_patch_branch:
        description: 'Create the git patch branch'
        default: true
        type: boolean
      bump_version:
        description: 'Set the next version'
        default: true
        type: boolean
      jira_release:
        description: 'Do a Jira release'
        default: true
        type: boolean
      update_archetype:
        description: 'Update the archetype'
        default: true
        type: boolean
      github_release:
        description: 'Generate a GitHub release'
        default: true
        type: boolean
      send_announcement:
        description: 'Announce the release on Rocket.Chat'
        default: true
        type: boolean
      jira_release_name_prefix:
        description: 'The prefix of the Jira release name'
        required: true
        type: string
      archetype_component_name:
        description: 'The component name in the Archetype'
        required: true
        type: string
    secrets:
      NEXUS3_PW:
        required: true
      ATLASSIAN_AUTH_TOKEN:
        required: true
      UNIPORT_APP_PRIVATE_KEY:
        required: true
      ROCKETCHAT_WEBHOOK_URL:
        required: true

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      SEM_VER: ${{ steps.parse.outputs.sem_ver }}
      BUILD_DATE: ${{ steps.parse.outputs.build_date }}
      RUN_ID: ${{ steps.parse.outputs.run_id }}
      COMMIT_SHA: ${{ steps.parse.outputs.commit_sha }}
      MAJOR: ${{ steps.parse.outputs.major }}
      MINOR: ${{ steps.parse.outputs.minor }}
      PATCH: ${{ steps.parse.outputs.patch }}
    steps:
      - name: Validate version format
        uses: uniport/workflows/.github/actions/validate-version@main
        with:
          version: ${{ inputs.version }}

      - name: Check if target branch exists
        id: branch_check
        uses: uniport/workflows/.github/actions/ensure-branch@main
        with:
          branch: ${{ inputs.target_branch }}

      - name: Parse version string
        id: parse
        uses: uniport/workflows/.github/actions/parse-version@main
        with:
          version: ${{ inputs.version }}

      - name: Summary
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ### Inputs
          - **version**: \`${{ inputs.version }}\`
          - **target_branch**: \`${{ inputs.target_branch }}\`

          ## Parse Version
          ### Outputs
          - **SEM_VER**: \`${{ steps.parse.outputs.SEM_VER }}\`
          - **BUILD_DATE**: \`${{ steps.parse.outputs.BUILD_DATE }}\`
          - **RUN_ID**: \`${{ steps.parse.outputs.RUN_ID }}\`
          - **COMMIT_SHA**: \`${{ steps.parse.outputs.COMMIT_SHA }}\`

          ## Parse SemVer
          ### Outputs
          - **MAJOR**: \`${{ steps.parse.outputs.MAJOR }}\`
          - **MINOR**: \`${{ steps.parse.outputs.MINOR }}\`
          - **PATCH**: \`${{ steps.parse.outputs.PATCH }}\`
          EOF

  promote:
    name: Promote Nexus Artifact
    if: ${{ inputs.promote_artifacts }}
    needs: [setup]
    uses: uniport/workflows/.github/workflows/move-nexus-artifacts.yml@main
    with:
      version: ${{ inputs.version }}
      move_docker_helm: true
      move_maven: true
    secrets:
      NEXUS3_PW: ${{ secrets.NEXUS3_PW }}

  git-tag:
    name: Create git tag
    if: ${{ inputs.create_tag }}
    needs: [setup]
    uses: uniport/workflows/.github/workflows/git-tag.yml@main
    permissions:
      contents: write # create tag
    with:
      tag_name: '${{ needs.setup.outputs.SEM_VER }}'
      tag_message: '${{ inputs.version }}'
      commit_sha: '${{ needs.setup.outputs.COMMIT_SHA }}'

  changelog:
    name: Update changelog
    if: ${{ inputs.update_changelog }}
    needs: [setup]
    uses: uniport/workflows/.github/workflows/changelog-update.yml@main
    permissions:
      contents: write # update changelog
    with:
      version: ${{ inputs.version }}
      branch_name: ${{ inputs.target_branch }}

  git-patch-branch:
    name: Create patch branch
    # Ensure this job runs only if the previous job succeeded or was skipped
    if: ${{ always() && inputs.create_patch_branch && (needs.changelog.result == 'success' || needs.changelog.result == 'skipped') }}
    needs: [setup, changelog]
    uses: uniport/workflows/.github/workflows/git-patch-branch-create.yml@main
    permissions:
      contents: write # create branch
    with:
      major: ${{ needs.setup.outputs.MAJOR }}
      minor: ${{ needs.setup.outputs.MINOR }}
      patch: ${{ needs.setup.outputs.PATCH }}
      branch_name: ${{ inputs.target_branch }}

  bump-version:
    name: Bump version
    # Ensure this job runs only if the previous jobs succeeded or was skipped (only skip if both previous jobs have failed)
    if: ${{ always() && inputs.bump_version && (needs.changelog.result == 'success' || needs.changelog.result == 'skipped') && (needs.git-patch-branch.result == 'success' || needs.git-patch-branch.result == 'skipped') }}
    needs: [setup, git-patch-branch, changelog]
    uses: uniport/workflows/.github/workflows/version-bump.yml@main
    permissions:
      contents: write # update version
    with:
      major: ${{ needs.setup.outputs.MAJOR }}
      minor: ${{ needs.setup.outputs.MINOR }}
      patch: ${{ needs.setup.outputs.PATCH }}
      branch_name: ${{ inputs.target_branch }}

  jira-release:
    name: Do Jira release
    if: ${{ inputs.jira_release }}
    needs: [setup]
    uses: uniport/workflows/.github/workflows/jira-release.yml@main
    with:
      version: ${{ inputs.version }}
      semver: ${{ needs.setup.outputs.SEM_VER }}
      component_name: ${{ inputs.jira_release_name_prefix }}
    secrets:
      ATLASSIAN_AUTH_TOKEN: ${{ secrets.ATLASSIAN_AUTH_TOKEN }}

  archetype:
    name: Update Archetype
    if: ${{ inputs.update_archetype }}
    needs: [setup]
    uses: uniport/workflows/.github/workflows/update-archetype.yml@main
    with:
      version: ${{ inputs.version }}
      component_name: ${{ inputs.archetype_component_name }}
      command: release
    secrets:
      UNIPORT_APP_PRIVATE_KEY: ${{ secrets.UNIPORT_APP_PRIVATE_KEY }}

  github-release:
    name: Create a release on GitHub
    runs-on: ubuntu-latest
    if: ${{ inputs.github_release }}
    needs: [setup, promote, git-tag]
    permissions:
      contents: write
    steps:
      - name: Create release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ inputs.version }}
          tag_name: ${{ needs.setup.outputs.SEM_VER }}
          body: |
            ## Changelog

            For a more high-level overview of what has changed, have a look at the **CHANGELOG.md**
          generate_release_notes: true
          prerelease: false

  announce:
    name: Announce new release
    # this send an announcement iff no job was skipped
    if: ${{ inputs.send_announcement }}
    needs:
      - setup
      - promote
      - git-tag
      - changelog
      - git-patch-branch
      - bump-version
      - jira-release
      - archetype
      - github-release
    runs-on: ubuntu-latest
    steps:
      - name: Notify uniport team
        uses: uniport/workflows/.github/actions/send-rocket-chat-message@main
        with:
          webhook_url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          channel: uniport
          message: |
            A **new release** just happened! ðŸš€

            [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md): `${{ inputs.version }}`
